termsForSave4<- terms(ff.all_TM2[["CTM"]], 10)
x<-array(NA,dim = c(10,10,4))
x[,,1]<-termsForSave1
x[,,2]<-termsForSave2
x[,,3]<-termsForSave3
x[,,4]<-termsForSave4
for (n in 1:4) {
tfs <- as.data.frame(x[, , n], stringsAsFactors = F)
adjacent_list <- lapply(1:10, function(i) embed(tfs[,i], 2)[, 2:1])
edgelist = as.data.frame(do.call(rbind, adjacent_list), stringsAsFactors =F)
g <-graph.data.frame(edgelist,directed=T )
l<-layout.fruchterman.reingold(g)
nodesize = centralization.degree(g)$res
V(g)$size = log( centralization.degree(g)$res )
nodeLabel = V(g)$name
E(g)$color =  unlist(lapply(sample(colors()[26:137], 10), function(i) rep(i, 9))); unique(E(g)$color)
# display the topic network plot
plot(g, vertex.label= nodeLabel,  edge.curved=TRUE,
vertex.label.cex =0.5,  edge.arrow.size=0.2, layout=l )
# save the plot
png(  paste("../output/topic_graph", n, ".png", sep=""),
width=5, height=5,
units="in", res=700)
plot(g, vertex.label= nodeLabel,  edge.curved=TRUE,
vertex.label.cex =0.5,  edge.arrow.size=0.2, layout=l )
dev.off()
}
# JAVA_HOME<- "C:/Software/JRE/JAVA/bin"
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
library(topicmodels)
library(slam)
library(igraph)
library(rvest)
library(tibble)
library(qdap)
library(sentimentr)
library(gplots)
library(syuzhet)
library(factoextra)
library(beeswarm)
library(scales)
library(RANN)
library(tidyr)
library(ggplot2)
source("../lib/plotstacked.R")
source("../lib/speechFuncs.R")
# read data
folder.path="../data/InauguralSpeeches/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prez.out=substr(speeches, 6, nchar(speeches)-4)
length.speeches=rep(NA, length(speeches))
ff.all<-Corpus(DirSource(folder.path))
ff.all<-tm_map(ff.all, stripWhitespace)
ff.all<-tm_map(ff.all, content_transformer(tolower))
ff.all<-tm_map(ff.all, removeWords, stopwords("english"))
ff.all<-tm_map(ff.all, removeWords, character(0))
ff.all<-tm_map(ff.all, removePunctuation)
tdm.all<-TermDocumentMatrix(ff.all)
tdm.tidy=tidy(tdm.all)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
dtm <- DocumentTermMatrix(ff.all,
control = list(weighting =
function(x)
weightTfIdf(x, normalize =
FALSE),
stopwords = TRUE))
ff.dtm=tidy(dtm)
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(9,"Blues"),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(9,"Blues"),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(9),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(9),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(9,"reds"),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(9,"blues"),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(9,"Blues"),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(9,"Reds"),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
#colors=brewer.pal(9,"Reds"),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(8,"Reds"),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(1,"Reds"),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(1,"Reds"),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(10,"Reds"),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(10,"Reds"),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(10,"Reds"),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(10,"Reds"),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(5,"Reds"),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(5,"Rainbows"),
main=prez.out[i])
?brewer.pal
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(5," BuGn"),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(5,"BuGn"),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(5,"PuRd"),
main=prez.out[i])
# get GRE vocabulary list
d<- read.table("../data/gre.txt", header = T)
d<- unlist(d)
d<- as.character(d)
# create the document term matrix based on GRE vocabulary
dtm2<- DocumentTermMatrix(ff.all,list(dictionary=d))
ff.dtm2<-tidy(dtm2)
# choose a wordcloud randomly
i<- sample(length(speeches),size = 1)
wordcloud(ff.dtm2$term[ff.dtm2$document==speeches[i]],
ff.dtm2$count[ff.dtm2$document==speeches[i]],
scale=c(5,0.5),
max.words=200,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(5,"PuRd"),
main=prez.out[i])
